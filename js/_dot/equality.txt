
@ https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Comparison_Operators

• Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions
  • "abc" === "abc"
• Two numbers are strictly equal when they are numerically equal (have the same number value).
  NaN is not equal to anything, including NaN.
  Positive and negative zeros are equal to one another
  • 123 === 123
  • NaN != NaN
  • +0 === -0
• Two Boolean operands are strictly equal if both are true or both are false
  • true === true
  • false === false
• Two distinct objects are never equal for either strictly or abstract comparisons
  • ({x:123}) != ({x:123})
• An expression comparing Objects is only true if the operands reference the same Object
  • var foo = bar = {x:123};
    foo == bar
• Null and Undefined Types are == (but not ===)
  • null == undefined
  • null !== undefined

• When comparing a number and a string, the string is converted to a number value.
  JavaScript attempts to convert the string numeric literal to a Number type value.
  First, a mathematical value is derived from the string numeric literal.
  Next, this value is rounded to nearest Number type value.
  • 25 == "0x19" // 25 == Number("0x19")
• If one of the operands is Boolean, the Boolean operand is converted to 1 if it is true and +0 if it is false.
  • 2 != true // 2 != 1
• If an object is compared with a number or string, JavaScript attempts to return the default value for the object.
  Operators attempt to convert the object to a primitive value, a String or Number value, using the valueOf and toString methods of the objects.
  If this attempt to convert the object fails, a runtime error is generated.
  • new String("abc") == "abc" // valueOf(), toString()
• Note that an object is converted into a primitive if, and only if, its comparand is a primitive.
  If both operands are objects, they're compared as objects, and the equality test is true only if both refer the same object.
  • new String("abc") != new String("abc")
  • var foo = bar = new String("abc");
  foo == bar

Equal(==)
• If the two operands are not of the same type, JavaScript converts the operands then applies strict comparison.
• If either operand is a number or a boolean, the operands are converted to numbers if possible;
  else if either operand is a string, the other operand is converted to a string if possible.
• If both operands are objects, then JavaScript compares internal references which are equal when operands refer to the same object in memory.

if one of operands is (number,boolean)
  convert operands to number if possible
  strict comparison
else if one of operands is (string)
  convert operands to string if possible
  strict comparison

Not equal(!=)
• Returns true if the operands are not equal.
• If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison.
• If both operands are objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.
